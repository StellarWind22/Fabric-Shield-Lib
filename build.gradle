import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {url = "https://minecraft.guntram.de/maven/"}
	maven { url = "https://jitpack.io" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/"}
	maven {url = "https://api.modrinth.com/maven"}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"



	//Mod Menu
	modCompileOnly modRuntimeOnly ("com.terraformersmc:modmenu:${project.mod_menu_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}
	
	//Fabric ASM
	modImplementation("com.github.Chocohead:Fabric-ASM:v2.3") {
		exclude (group: "net.fabricmc.fabric-api")
	}
	include "com.github.Chocohead:Fabric-ASM:v2.3"

	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	include "maven.modrinth:midnightlib:${project.midnightlib_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
}

// Remove debug tags
jar.doFirst {
	def tagDir = file("$buildDir/resources/main/data/fabricshieldlib/tags/item")
	def entriesToRemove = [
		'fabricshieldlib:fabric_banner_shield',
		'fabricshieldlib:fabric_component_shield'
	]

	if (tagDir.exists()) {
		tagDir.eachFileMatch(~/.+\.json$/) { File jsonFile ->
			def json = new JsonSlurper().parse(jsonFile)

			if (json.values instanceof List) {
				json.values.removeAll { it in entriesToRemove }

				jsonFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
				System.out.println("Patched: ${jsonFile}")
			}
		}
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
	}
}

fabricApi {
	configureDataGeneration()
}
